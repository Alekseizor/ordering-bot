package state

import (
	"database/sql"
	"github.com/Alekseizor/ordering-bot/internal/app/conversion"
	"github.com/Alekseizor/ordering-bot/internal/app/repository"
	"github.com/SevereCloud/vksdk/v2/api"
	"github.com/SevereCloud/vksdk/v2/api/params"
	"github.com/SevereCloud/vksdk/v2/object"
	log "github.com/sirupsen/logrus"
	"strconv"
	"time"
	"unicode/utf8"
)

// ////////////////////////////////////////////////////////
type OrderType struct {
}

func (state OrderType) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	if messageText == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" {
		StartState{}.PreviewProcess(ctc)
		return &StartState{}
	} else if messageText == "–†—É–±–µ–∂–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å" || messageText == "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ" || messageText == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" || messageText == "–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞" || messageText == "–≠–∫–∑–∞–º–µ–Ω" {
		_, err := ctc.Db.ExecContext(*ctc.Ctx, "INSERT INTO orders(customer_vk_id,type_order,date_order) VALUES ($1, $2,$3)", ctc.User.VkID, messageText, time.Now().UTC().Add(time.Hour*3))
		if err != nil {
			log.WithError(err).Error("cant set order on state OrderType")
			state.PreviewProcess(ctc)
			return &OrderType{}
		}
		ChoiceDiscipline{}.PreviewProcess(ctc)
		return &ChoiceDiscipline{}
	} else {
		state.PreviewProcess(ctc)
		return &OrderType{}
	}
}

func (state OrderType) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("‚úè–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:")
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–†—É–±–µ–∂–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å", "", "secondary")
	k.AddTextButton("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", "", "secondary")
	k.AddRow()
	k.AddTextButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "", "secondary")
	k.AddTextButton("–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", "", "secondary")
	k.AddRow()
	k.AddTextButton("–≠–∫–∑–∞–º–µ–Ω", "", "secondary")
	k.AddRow()
	k.AddTextButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "", "negative")
	b.Keyboard(k)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed send on state OrderType")
		log.Error(err)
	}
}
func (state OrderType) Name() string {
	return "OrderType"
}

// ////////////////////////////////////////////////////////
type OrderState struct {
}

func (state OrderState) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	if messageText == "–í—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã" {
		ChoiceDiscipline{}.PreviewProcess(ctc)
		return &ChoiceDiscipline{}
	} else if messageText == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" {
		StartState{}.PreviewProcess(ctc)
		return &StartState{}
	} else {
		state.PreviewProcess(ctc)
		return &OrderState{}
	}
}

func (state OrderState) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("üìå–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É ¬´–í—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã¬ª")
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–í—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", "", "secondary")
	k.AddRow()
	k.AddTextButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "", "negative")
	b.Keyboard(k)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
}
func (state OrderState) Name() string {
	return "OrderState"
}

// ////////////////////////////////////////////////////////
type ChoiceDiscipline struct {
}

func (state ChoiceDiscipline) Process(ctc ChatContext, msg object.MessagesMessage) State {
	ID, err := repository.GetIDOrder(ctc.Db, ctc.User.VkID)
	if err != nil {
		log.Println(err)
		state.PreviewProcess(ctc)
		return &ChoiceDiscipline{}
	}
	messageText := msg.Text
	if messageText == "–ù–∞–∑–∞–¥" {
		err = repository.DeleteOrder(ctc.Db, ID)
		if err != nil {
			log.Println(err)
			OrderType{}.PreviewProcess(ctc)
			return &OrderType{}
		}
		OrderType{}.PreviewProcess(ctc)
		return &OrderType{}
	} else {
		messageInt, err := strconv.Atoi(messageText)
		if err != nil {
			state.PreviewProcess(ctc)
			return &ChoiceDiscipline{}
		} else if (messageInt < 1) || (messageInt > 52) {
			state.PreviewProcess(ctc)
			return &ChoiceDiscipline{}
		} else {
			_, err := ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET discipline_id =$1 WHERE id=$2", messageInt, ID)
			if err != nil {
				log.WithError(err).Error("cant set order on state ChoiceDiscipline")
				state.PreviewProcess(ctc)
				return &ChoiceDiscipline{}
			}
			ChoiceDate{}.PreviewProcess(ctc)
			return &ChoiceDate{}
		}

	}
}

func (state ChoiceDiscipline) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("üìå–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
	b.PeerID(ctc.User.VkID)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
	b = params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("1. MATLAB\n2. MS Office(Word, excel, Access)\n3. Mathcad\n4. –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è\n5. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n6. –î–µ—Ç–∞–ª–∏ –º–∞—à–∏–Ω\n7. –î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n8. –ò–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞\n9. –ò–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è\n10. –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞\n11. –ò—Å—Ç–æ—Ä–∏—è\n12. –ö—Ä–∞—Ç–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ —Ä—è–¥—ã\n13. –ö—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—è\n14. –õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞\n15. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n16. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n17. –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–µ\n18. –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\n19. –ú–µ—Ç—Ä–æ–ª–æ–≥–∏—è\n20. –ú–µ—Ö–∞–Ω–∏–∫–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ –∏ –≥–∞–∑–∞\n21. –ù–∞—á–µ—Ä—Ç–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è\n22. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞\n23. –û—Å–Ω–æ–≤—ã –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–±–æ—Ä–æ–≤\n24. –û—Å–Ω–æ–≤—ã —Ç–µ–æ—Ä–∏–∏ —Ü–µ–ø–µ–π\n25. –û—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–∏–±–æ—Ä–æ—Å—Ç—Ä–æ–µ–Ω–∏—è\n26. –ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è\n27. –ü—Ä–∞–≤–æ–≤–µ–¥–µ–Ω–∏–µ\n28. –ü—Ä–∞–∫—Ç–∏–∫–∞\n29. –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n30. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è\n31. –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π\n32. –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n33. –°–æ—Ü–∏–æ–ª–æ–≥–∏—è\n34. –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞\n35. –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∏\n36. –¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π\n37. –¢–µ–æ—Ä–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∏ –º–∞—à–∏–Ω\n38. –¢–µ–æ—Ä–∏—è –ø–æ–ª—è\n39. –¢–µ–æ—Ä–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –∏—Å—á–∏—Å–ª–µ–Ω–∏–µ\n40. –¢–µ–æ—Ä–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n41. –¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞\n42. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n43. –£—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–∑–∏–∫–∏\n44. –§–∏–∑–∏–∫–∞\n45. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞\n46. –§–∏–ª–æ—Å–æ—Ñ–∏—è\n47. –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n48. –•–∏–º–∏—è\n49. –¶–∏—Ñ—Ä–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –º–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã\n50. –≠–∫–æ–Ω–æ–º–∏–∫–∞\n51. –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞\n52. –≠–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞")
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–ù–∞–∑–∞–¥", "", "negative")
	b.Keyboard(k)
	_, err = ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
}

func (state ChoiceDiscipline) Name() string {
	return "ChoiceDiscipline"
}

// ////////////////////////////////////////////////////////
const (
	layout  = "02.01.2006"
	layout2 = "2006-01-02 15:04:05-07"
)

type ChoiceDate struct {
}

func (state ChoiceDate) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	ID, err := repository.GetIDOrder(ctc.Db, ctc.User.VkID)
	if err != nil {
		state.PreviewProcess(ctc)
		return &ChoiceDate{}
	}
	if messageText == "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥" {
		ChoiceDiscipline{}.PreviewProcess(ctc)
		return &ChoiceDiscipline{}
	} else if messageText == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" {
		b := params.NewMessagesSendBuilder()
		b.RandomID(0)
		b.Message("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
		b.PeerID(ctc.User.VkID)
		k := &object.MessagesKeyboard{}
		k.AddRow()
		k.AddTextButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥", "", "secondary")
		b.Keyboard(k)
		_, err := ctc.Vk.MessagesSend(b.Params)
		if err != nil {
			log.Println("Failed to get record")
			log.Error(err)
		}
		//state.PreviewProcess(ctc)
		return &ChoiceDate{}
	} else if messageText == "–°–µ–≥–æ–¥–Ω—è" || messageText == "–°–µ–π—á–∞—Å" {
		_, err := ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET date_finish =$1 WHERE id=$2", time.Now().UTC().Add(time.Hour*3), ID)
		if err != nil {
			log.WithError(err).Error("cant set date_finish")
			state.PreviewProcess(ctc)
			return &ChoiceDate{}
		}
		ChoiceTime{}.PreviewProcess(ctc)
		return &ChoiceTime{}
	} else if messageText == "–ó–∞–≤—Ç—Ä–∞" {
		_, err := ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET date_finish =$1 WHERE id=$2", time.Now().UTC().Add(time.Hour*3).AddDate(0, 0, 1), ID)
		if err != nil {
			log.WithError(err).Error("cant set date_finish")
			state.PreviewProcess(ctc)
			return &ChoiceDate{}
		}
		ChoiceTime{}.PreviewProcess(ctc)
		return &ChoiceTime{}
	} else if messageText == "–ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏" {
		_, err := ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET date_finish =$1 WHERE id=$2", time.Now().UTC().Add(time.Hour*3).AddDate(0, 0, 14), ID)
		if err != nil {
			log.WithError(err).Error("cant set date_finish")
			state.PreviewProcess(ctc)
			return &ChoiceDate{}
		}
		ChoiceTime{}.PreviewProcess(ctc)
		return &ChoiceTime{}
	} else if utf8.RuneCountInString(messageText) > 7 {
		if messageText[2] == '.' && messageText[5] == ' ' {
			day, err := strconv.Atoi(messageText[0:2])
			if err != nil {
				log.WithError(err).Error("the string is not formatted per day")
				state.PreviewProcess(ctc)
				return &ChoiceDate{}
			}
			month, err := strconv.Atoi(messageText[3:5])
			if err != nil {
				log.WithError(err).Error("the string is not formatted per month")
				state.PreviewProcess(ctc)
				return &ChoiceDate{}
			}
			weekday := messageText[6:]
			log.Println(day, month, weekday)
			today := time.Now().UTC().Add(time.Hour * 3)
			today = today.AddDate(0, 0, 1) //—Å–º–µ—Å—Ç–∏–ª–∏ –¥–∞—Ç—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
			for i := 0; i < 8; i++ {
				today = today.AddDate(0, 0, 1) //—Å–º–µ—â–∞–µ–º –ø–æ—ç—Ç–∞–ø–Ω–æ –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ –ø—è—Ç–∏ –¥–Ω–µ–π
				if day == today.Day() && month == int(today.Month()) && weekday == conversion.GetWeekDayStr(today) {
					_, err := ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET date_finish =$1 WHERE id=$2", today, ID)
					if err != nil {
						log.WithError(err).Error("cant set date_finish")
						state.PreviewProcess(ctc)
						return &ChoiceDate{}
					}
					ChoiceTime{}.PreviewProcess(ctc)
					return &ChoiceTime{}
				}
			}
			state.PreviewProcess(ctc)
			return &ChoiceDate{}
		} else if messageText[2] == '.' && messageText[5] == '.' {
			date, err := time.Parse(layout, messageText)
			if err != nil {
				log.WithError(err).Error("the string is not formatted per date")
				state.PreviewProcess(ctc)
				return &ChoiceDate{}
			}
			if date.After(time.Now().UTC().Add(time.Hour*3).AddDate(0, 0, -1)) {
				_, err := ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET date_finish =$1 WHERE id=$2", date, ID)
				if err != nil {
					log.WithError(err).Error("cant set date_finish")
					state.PreviewProcess(ctc)
					return &ChoiceDate{}
				}
				ChoiceTime{}.PreviewProcess(ctc)
				return &ChoiceTime{}
			} else {
				b := params.NewMessagesSendBuilder()
				b.RandomID(0)
				b.Message("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
				b.PeerID(ctc.User.VkID)
				k := &object.MessagesKeyboard{}
				k.AddRow()
				k.AddTextButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥", "", "secondary")
				_, err := ctc.Vk.MessagesSend(b.Params)
				if err != nil {
					log.Println("Failed to get record")
					log.Error(err)
				}
				return &ChoiceDate{}
			}
		} else {
			state.PreviewProcess(ctc)
			return &ChoiceDate{}
		}
	} else {
		state.PreviewProcess(ctc)
		return &ChoiceDate{}
	}
}

func (state ChoiceDate) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("üìÖ–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–°–µ–≥–æ–¥–Ω—è", "", "secondary")
	k.AddTextButton("–ó–∞–≤—Ç—Ä–∞", "", "secondary")
	//–≤–∑—è–ª –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
	today := time.Now().UTC().Add(time.Hour * 3)
	today = today.AddDate(0, 0, 1) //—Å–º–µ—Å—Ç–∏–ª–∏ –¥–∞—Ç—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
	k.AddRow()
	for i := 0; i < 8; i++ {
		if i == 4 {
			k.AddRow()
		}
		today = today.AddDate(0, 0, 1) //—Å–º–µ—â–∞–µ–º –ø–æ—ç—Ç–∞–ø–Ω–æ –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ –ø—è—Ç–∏ –¥–Ω–µ–π
		k.AddTextButton(conversion.GetDateStr(today), "", "secondary")
	}
	k.AddRow()
	k.AddTextButton("–ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏", "", "secondary")
	k.AddTextButton("–°–µ–π—á–∞—Å", "", "secondary")
	k.AddTextButton("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", "", "secondary")
	k.AddRow()
	k.AddTextButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥", "", "secondary")
	b.Keyboard(k)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
}
func (state ChoiceDate) Name() string {
	return "ChoiceDate"
}

// ////////////////////////////////////////////////////////
type ChoiceTime struct {
}

func (state ChoiceTime) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	ID, err := repository.GetIDOrder(ctc.Db, ctc.User.VkID)
	if err != nil {
		state.PreviewProcess(ctc)
		return &ChoiceTime{}
	}
	if messageText == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è" {
		ChoiceDate{}.PreviewProcess(ctc)
		return &ChoiceDate{}
	} else if utf8.RuneCountInString(messageText) == 5 {
		if messageText[2] == ':' {
			hour, err := strconv.Atoi(messageText[0:2])
			if err != nil || hour < 0 || hour > 23 {
				log.Println("z")
				log.WithError(err).Error("the string is not formatted per day")
				state.PreviewProcess(ctc)
				return &ChoiceTime{}
			}
			minute, err := strconv.Atoi(messageText[3:5])
			if err != nil || minute < 0 || minute > 60 {
				log.WithError(err).Error("the string is not formatted per month")
				state.PreviewProcess(ctc)
				return &ChoiceTime{}
			}
			var date time.Time
			err = ctc.Db.QueryRow("SELECT date_finish from orders WHERE customer_vk_id =$1 ORDER BY id DESC LIMIT 1", ctc.User.VkID).Scan(&date)
			if err != nil {
				if err == sql.ErrNoRows {
					log.Println("Row with customer_vk_id unknown")
				} else {
					log.Println("Couldn't find the line with the order")
				}
				log.Error(err)
				state.PreviewProcess(ctc)
				return &ChoiceTime{}
			}
			date = time.Date(date.Year(), date.Month(), date.Day(), hour, minute, 0, 0, time.UTC)
			_, err = ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET date_finish =$1 WHERE id=$2", date, ID)
			if err != nil {
				log.WithError(err).Error("cant set date_finish")
				state.PreviewProcess(ctc)
				return &ChoiceTime{}
			}
			ConfirmationOrder{}.PreviewProcess(ctc)
			return &ConfirmationOrder{}
		} else {
			state.PreviewProcess(ctc)
			return &ChoiceTime{}
		}
	} else {
		state.PreviewProcess(ctc)
		return &ChoiceTime{}
	}
}

func (state ChoiceTime) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("‚è∞–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è", "", "secondary")
	b.Keyboard(k)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
}
func (state ChoiceTime) Name() string {
	return "ChoiceTime"
}

// ////////////////////////////////////////////////////////
type ConfirmationOrder struct {
}

func (state ConfirmationOrder) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	if messageText == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏" {
		ChoiceTime{}.PreviewProcess(ctc)
		return &ChoiceTime{}
	} else if messageText == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" {
		ID, err := repository.GetIDOrder(ctc.Db, ctc.User.VkID)
		_, err = ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET customers_comment =$1 WHERE id=$2", nil, ID)
		if err != nil {
			log.WithError(err).Error("cant record users comment")
			state.PreviewProcess(ctc)
			return &ConfirmationOrder{}
		}
		TaskOrder{}.PreviewProcess(ctc)
		return &TaskOrder{}
	} else if messageText == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É" {
		CommentOrder{}.PreviewProcess(ctc)
		return &CommentOrder{}
	} else {
		state.PreviewProcess(ctc)
		return &ConfirmationOrder{}
	}
}

func (state ConfirmationOrder) PreviewProcess(ctc ChatContext) {
	output, err := repository.GetCompleteOrder(ctc.Db, ctc.User.VkID)
	if err != nil {
		log.Println("Failed to get orders output")
		log.Error(err)
	}
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message(output)
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "", "secondary")
	k.AddTextButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", "", "secondary")
	k.AddTextButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É", "", "secondary")
	b.Keyboard(k)
	_, err = ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to send order: state ConfirmationOrder")
		log.Error(err)
	}
}
func (state ConfirmationOrder) Name() string {
	return "ConfirmationOrder"
}

// ////////////////////////////////////////////////////////
type CommentOrder struct {
}

func (state CommentOrder) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	if messageText == "–ù–∞–∑–∞–¥" {
		ConfirmationOrder{}.PreviewProcess(ctc)
		return &ConfirmationOrder{}
	} else {
		if utf8.RuneCountInString(messageText) > 150 {
			log.Println("Text is to large")
			CommentOrder{}.PreviewProcess(ctc)
			return &CommentOrder{}
		}
		ID, err := repository.GetIDOrder(ctc.Db, ctc.User.VkID)
		_, err = ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET customers_comment =$1 WHERE id=$2", messageText, ID)
		if err != nil {
			log.WithError(err).Error("cant record users comment")
		}

		TaskOrder{}.PreviewProcess(ctc)
		return &TaskOrder{}
	}
}

func (state CommentOrder) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - 150 —Å–∏–º–≤–æ–ª–æ–≤")
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	//k.AddTextButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "", "secondary")
	k.AddTextButton("–ù–∞–∑–∞–¥", "", "negative")
	b.Keyboard(k)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
}
func (state CommentOrder) Name() string {
	return "CommentOrder"
}

// ////////////////////////////////////////////////////////
type TaskOrder struct {
}

func (state TaskOrder) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	//todo: –ü—Ä–æ–≤–µ—Ä–∫–∞ - –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
	fullMSG, _ := ctc.Vk.MessagesGetByID(api.Params{
		"message_ids": msg.ID,
	})

	attachments := fullMSG.Items[0].Attachments
	if attachments != nil {
		repository.WriteUrl(ctc.Db, ctc.User.VkID, attachments)
	}

	if messageText == "–ù–∞–∑–∞–¥" {
		ConfirmationOrder{}.PreviewProcess(ctc)
		return &ConfirmationOrder{}
	} else {
		ID, err := repository.GetIDOrder(ctc.Db, ctc.User.VkID)
		_, err = ctc.Db.ExecContext(*ctc.Ctx, "UPDATE orders SET order_task =$1 WHERE id=$2", messageText, ID)
		if err != nil {
			log.WithError(err).Error("cant record users comment")
			state.PreviewProcess(ctc)
			return &TaskOrder{}
		}
		OrderCompleted{}.PreviewProcess(ctc)
		return &OrderCompleted{}
	}
}

func (state TaskOrder) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("üìé–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ,—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏—è (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–ù–∞–∑–∞–¥", "", "negative")
	b.Keyboard(k)

	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
}
func (state TaskOrder) Name() string {
	return "TaskOrder"
}

// ////////////////////////////////////////////////////////
type ConfirmExecutor struct {
}

func (state ConfirmExecutor) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	if messageText == "–ù–∞–∑–∞–¥" {
		OrderCompleted{}.PreviewProcess(ctc)
		return &OrderCompleted{}
	}
	executorID, err := strconv.Atoi(messageText)
	if err != nil {
		log.WithError(err).Error("the string is not number for executor id")
		state.PreviewProcess(ctc)
		return &ConfirmExecutor{}
	}
	isExec, err := repository.IsExecutorByID(ctc.Db, executorID)
	if isExec {
		b := params.NewMessagesSendBuilder()
		b.RandomID(0)
		b.Message("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
		b.PeerID(ctc.User.VkID)
		_, err = ctc.Vk.MessagesSend(b.Params)
		if err != nil {
			log.Println("Failed to get record")
			log.Error(err)
		}
		err = DirectDistribution(ctc, executorID)
		if err != nil {
			log.Println("Failed to send direct offer")
			log.Error(err)
		}
		StartState{}.PreviewProcess(ctc)
		return &StartState{}
	} else {
		b := params.NewMessagesSendBuilder()
		b.RandomID(0)
		b.Message("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
		b.PeerID(ctc.User.VkID)
		_, err := ctc.Vk.MessagesSend(b.Params)
		if err != nil {
			log.Println("Failed to get record")
			log.Error(err)
		}
		state.PreviewProcess(ctc)
		return &ConfirmExecutor{}
	}
}

func (state ConfirmExecutor) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("–í–≤–µ–¥–∏—Ç–µ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–ù–∞–∑–∞–¥", "", "negative")
	b.Keyboard(k)
	b.PeerID(ctc.User.VkID)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
}
func (state ConfirmExecutor) Name() string {
	return "ConfirmExecutor"
}

// ////////////////////////////////////////////////////////
type OrderCompleted struct {
}

func (state OrderCompleted) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	if messageText == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" {
		err := DistributionOrderExecutors(ctc)
		if err != nil {
			log.Println("the order could not be sent to the executors")
		}
		StartState{}.PreviewProcess(ctc)
		return &StartState{}

	} else if messageText == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑" {
		OrderChange{}.PreviewProcess(ctc)
		return &OrderChange{}

	} else if messageText == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑" {
		OrderCancel{}.PreviewProcess(ctc)
		return &OrderCancel{}

	} else if messageText == "–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è" {
		ConfirmExecutor{}.PreviewProcess(ctc)
		return &ConfirmExecutor{}

	} else {
		state.PreviewProcess(ctc)
		return &OrderCompleted{}
	}
}

func (state OrderCompleted) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –í–∞—à –∑–∞–∫–∞–∑ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
	b.PeerID(ctc.User.VkID)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record OrderCompleted")
		log.Error(err)
	}
	output, err := repository.GetCompleteOrder(ctc.Db, ctc.User.VkID)
	if err != nil {
		log.Println("Failed to get orders output")
		log.Error(err)
	}
	b.Message(output)
	attachment, _ := repository.GetAttachments(ctc.Vk, ctc.Db, ctc.User.VkID)
	log.Println("–≤—ã–≤–æ–¥ - " + output)
	b.Attachment(attachment)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "", "secondary")
	k.AddTextButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", "", "secondary")
	k.AddTextButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", "", "secondary")
	k.AddRow()
	k.AddTextButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "", "secondary")
	b.Keyboard(k)
	_, err = ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record OrderCompleted 2")
		log.Error(err)
	}
}
func (state OrderCompleted) Name() string {
	return "OrderCompleted"
}

// ////////////////////////////////////////////////////////
type OrderCancel struct {
}

func (state OrderCancel) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	if messageText == "–î–∞" {
		ID, err := repository.GetIDOrder(ctc.Db, ctc.User.VkID)
		if err != nil {
			log.WithError(err).Error("cant get order id")
			state.PreviewProcess(ctc)
			return &OrderCancel{}
		}
		_, err = ctc.Db.ExecContext(*ctc.Ctx, "DELETE FROM orders WHERE id=$1", ID)
		if err != nil {
			log.WithError(err).Error("cant delete order")
			state.PreviewProcess(ctc)
			return &OrderCancel{}
		}
		StartState{}.PreviewProcess(ctc)
		return &StartState{}
	} else {
		OrderCompleted{}.PreviewProcess(ctc)
		return &OrderCompleted{}
	}
}

func (state OrderCancel) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?")
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–î–∞", "", "positive")
	k.AddTextButton("–ù–µ—Ç", "", "negative")
	b.Keyboard(k)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
}
func (state OrderCancel) Name() string {
	return "OrderCancel"
}

// ////////////////////////////////////////////////////////
type OrderChange struct {
}

func (state OrderChange) Process(ctc ChatContext, msg object.MessagesMessage) State {
	messageText := msg.Text
	if messageText == "–ù–∞–∑–∞–¥" {
		OrderCompleted{}.PreviewProcess(ctc)
		return &OrderCompleted{}
	} else if messageText == "–í–∏–¥ —Ä–∞–±–æ—Ç—ã" {
		EditType{}.PreviewProcess(ctc)
		return &EditType{}
	} else if messageText == "–í–∏–¥ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã" {
		EditDiscipline{}.PreviewProcess(ctc)
		return &EditDiscipline{}
	} else if messageText == "–î–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞" {
		EditDate{}.PreviewProcess(ctc)
		return &EditDate{}
	} else if messageText == "–í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞" {
		EditTime{}.PreviewProcess(ctc)
		return &EditTime{}
	} else if messageText == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É" {
		EditTaskOrder{}.PreviewProcess(ctc)
		return &EditTaskOrder{}
	} else if messageText == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É" {
		EditCommentOrder{}.PreviewProcess(ctc)
		return &EditCommentOrder{}
	} else {
		OrderCompleted{}.PreviewProcess(ctc)
		return &OrderCompleted{}
	}
}

func (state OrderChange) PreviewProcess(ctc ChatContext) {
	b := params.NewMessagesSendBuilder()
	b.RandomID(0)
	b.Message("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
	b.PeerID(ctc.User.VkID)
	k := &object.MessagesKeyboard{}
	k.AddRow()
	k.AddTextButton("–í–∏–¥ —Ä–∞–±–æ—Ç—ã", "", "secondary")
	//k.AddRow()
	k.AddTextButton("–í–∏–¥ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", "", "secondary")
	k.AddRow()
	k.AddTextButton("–î–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", "", "secondary")
	//k.AddRow()
	k.AddTextButton("–í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", "", "secondary")
	k.AddRow()
	k.AddTextButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É", "", "secondary")
	//k.AddRow()
	k.AddTextButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É", "", "secondary")
	k.AddRow()
	k.AddTextButton("–ù–∞–∑–∞–¥", "", "negative")
	b.Keyboard(k)
	_, err := ctc.Vk.MessagesSend(b.Params)
	if err != nil {
		log.Println("Failed to get record")
		log.Error(err)
	}
}
func (state OrderChange) Name() string {
	return "OrderChange"
}
